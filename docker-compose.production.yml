services:
  # PostgreSQL 데이터베이스
  database:
    image: postgres:15-alpine
    container_name: it-inventory-db
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=inventory_db
      - POSTGRES_USER=inventory_user
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - TZ=Asia/Seoul
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/database.sql:/docker-entrypoint-initdb.d/init.sql
      - ./backend/backup:/backup
    networks:
      - it-inventory-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U inventory_user -d inventory_db"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 백엔드 API 서버
  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    container_name: it-inventory-api
    environment:
      - NODE_ENV=production
      - DB_HOST=database
      - DB_NAME=inventory_db
      - DB_USER=inventory_user
      - DB_PASSWORD=${DB_PASSWORD}
      - JWT_SECRET=${JWT_SECRET}
      - PORT=3000
      - TZ=Asia/Seoul
    volumes:
      - ./backend/backup:/backup
      - api_logs:/app/logs
    networks:
      - it-inventory-network
    depends_on:
      database:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 프론트엔드 웹서버
  frontend:
    build: .
    container_name: it-inventory-web
    ports:
      - "8080:80"
    environment:
      - TZ=Asia/Seoul
      - API_BASE_URL=http://backend:3000/api
    volumes:
      - ./logs:/var/log/nginx
    networks:
      - it-inventory-network
    depends_on:
      - backend
    restart: unless-stopped

  # 백업 스케줄러 (Cron)
  backup-scheduler:
    image: alpine:latest
    container_name: it-inventory-backup
    environment:
      - TZ=Asia/Seoul
      - DB_PASSWORD=${DB_PASSWORD}
    volumes:
      - ./backend/backup:/backup
      - postgres_data:/data
      - backup_data:/data/backups
    networks:
      - it-inventory-network
    depends_on:
      - database
    restart: unless-stopped
    command: |
      sh -c "
        apk add --no-cache postgresql-client dcron bash curl &&
        echo '0 2 * * * /backup/backup.sh' > /etc/crontabs/root &&
        echo '0 14 * * * /backup/backup.sh' >> /etc/crontabs/root &&
        crond -f -d 8
      "

  # 모니터링 (Prometheus + Grafana)
  prometheus:
    image: prom/prometheus:latest
    container_name: it-inventory-prometheus
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - it-inventory-network
    restart: unless-stopped
    profiles:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    container_name: it-inventory-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - it-inventory-network
    restart: unless-stopped
    profiles:
      - monitoring

networks:
  it-inventory-network:
    driver: bridge

volumes:
  postgres_data:
  backup_data:
  api_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local