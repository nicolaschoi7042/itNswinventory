name: 🏷️ Release & Deploy

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        default: 'v1.0.0'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # 릴리즈 정보 검증
  validate-release:
    name: 🔍 Validate Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🏷️ Get version
        id: get_version
        run: |
          if [ "${{ github.event_name }}" = "release" ]; then
            VERSION=${GITHUB_REF#refs/tags/}
          else
            VERSION=${{ github.event.inputs.version }}
          fi
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "📋 Release version: ${VERSION}"

      - name: ✅ Validate version format
        run: |
          VERSION=${{ steps.get_version.outputs.version }}
          if [[ $VERSION =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "✅ Version format is valid: $VERSION"
          else
            echo "❌ Invalid version format: $VERSION (expected: vX.Y.Z)"
            exit 1
          fi

  # 멀티 플랫폼 Docker 이미지 빌드
  build-multiarch:
    name: 🏗️ Multi-Architecture Build
    runs-on: ubuntu-latest
    needs: validate-release
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐳 Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔑 Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🏷️ Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest
            type=raw,value=${{ needs.validate-release.outputs.version }}
            type=raw,value=stable

      - name: 🚀 Build and push multi-arch image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # 프로덕션 백엔드 이미지 빌드
  build-backend:
    name: 🔧 Build Backend Image
    runs-on: ubuntu-latest
    needs: validate-release
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔑 Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🏷️ Extract backend metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend
          tags: |
            type=raw,value=latest
            type=raw,value=${{ needs.validate-release.outputs.version }}

      - name: 🚀 Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  # 릴리즈 아티팩트 생성
  create-artifacts:
    name: 📦 Create Release Artifacts
    runs-on: ubuntu-latest
    needs: [validate-release, build-multiarch]
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Create deployment package
        run: |
          VERSION=${{ needs.validate-release.outputs.version }}
          
          # 배포 패키지 디렉터리 생성
          mkdir -p release-artifacts
          
          # 프로덕션 배포 파일들 복사
          cp docker-compose.production.yml release-artifacts/
          cp -r backend/backup release-artifacts/
          cp start.sh stop.sh release-artifacts/
          cp README.md UPGRADE_GUIDE.md release-artifacts/
          
          # 환경 변수 템플릿 생성
          cat > release-artifacts/.env.example << EOF
          # IT Inventory System Configuration
          DB_PASSWORD=your_secure_database_password
          JWT_SECRET=your_jwt_secret_key
          GRAFANA_PASSWORD=your_grafana_password
          EOF
          
          # 빠른 시작 가이드 생성
          cat > release-artifacts/QUICK_START.md << EOF
          # 🚀 IT Inventory System - Quick Start Guide
          
          ## Prerequisites
          - Docker and Docker Compose installed
          - Minimum 2GB RAM, 1GB disk space
          
          ## Installation Steps
          
          1. **Download and extract this release package**
          
          2. **Configure environment variables:**
             \`\`\`bash
             cp .env.example .env
             # Edit .env with your secure passwords
             \`\`\`
          
          3. **Start the system:**
             \`\`\`bash
             chmod +x start.sh
             ./start.sh
             \`\`\`
          
          4. **Access the application:**
             - Web UI: http://localhost:8080/index.html
             - Admin login: admin / admin123
          
          ## Docker Images Used
          - Frontend: ghcr.io/nicolaschoi7042/itnswinventory:${VERSION}
          - Backend: ghcr.io/nicolaschoi7042/itnswinventory-backend:${VERSION}
          
          ## Support
          - Documentation: https://github.com/nicolaschoi7042/itNswinventory
          - Issues: https://github.com/nicolaschoi7042/itNswinventory/issues
          EOF
          
          # 아카이브 생성
          tar -czf release-artifacts/it-inventory-system-${VERSION}.tar.gz -C release-artifacts .
          zip -r release-artifacts/it-inventory-system-${VERSION}.zip release-artifacts/* -x "*.tar.gz"

      - name: 📤 Upload release artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-artifacts-${{ needs.validate-release.outputs.version }}
          path: release-artifacts/
          retention-days: 90

  # GitHub 릴리즈 업데이트
  update-release:
    name: 📝 Update GitHub Release
    runs-on: ubuntu-latest
    needs: [validate-release, build-multiarch, build-backend, create-artifacts]
    if: github.event_name == 'release'
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📥 Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: release-artifacts-${{ needs.validate-release.outputs.version }}
          path: ./artifacts

      - name: 📝 Update release with artifacts
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.validate-release.outputs.version }}
          files: |
            ./artifacts/*.tar.gz
            ./artifacts/*.zip
          body: |
            # 🎉 IT Asset & Software Inventory Management System ${{ needs.validate-release.outputs.version }}
            
            ## 📦 What's Included
            - ✅ Complete web-based IT asset management system
            - ✅ Docker containers for easy deployment  
            - ✅ PostgreSQL database with full schema
            - ✅ JWT authentication and role-based access
            - ✅ Automatic backup system
            - ✅ Multi-architecture support (AMD64, ARM64)
            
            ## 🚀 Quick Deployment
            ```bash
            # Download and extract the release package
            tar -xzf it-inventory-system-${{ needs.validate-release.outputs.version }}.tar.gz
            cd it-inventory-system-*
            
            # Configure environment
            cp .env.example .env
            # Edit .env with your passwords
            
            # Start system
            ./start.sh
            ```
            
            ## 🐳 Docker Images
            - `ghcr.io/nicolaschoi7042/itnswinventory:${{ needs.validate-release.outputs.version }}`
            - `ghcr.io/nicolaschoi7042/itnswinventory-backend:${{ needs.validate-release.outputs.version }}`
            
            ## 📖 Documentation
            See `QUICK_START.md` in the release package for detailed setup instructions.
            
            ---
            
            🤖 *This release was automatically generated by GitHub Actions*

  # 배포 성공 알림
  notify-release:
    name: 🎊 Release Complete
    runs-on: ubuntu-latest
    needs: [validate-release, build-multiarch, build-backend, create-artifacts]
    if: success()
    steps:
      - name: 🎉 Release success notification
        run: |
          echo "🎊 IT Inventory System ${{ needs.validate-release.outputs.version }} released successfully!"
          echo "🐳 Docker images published:"
          echo "  - ghcr.io/nicolaschoi7042/itnswinventory:${{ needs.validate-release.outputs.version }}"
          echo "  - ghcr.io/nicolaschoi7042/itnswinventory-backend:${{ needs.validate-release.outputs.version }}"
          echo "📦 Release artifacts generated and attached to GitHub release"
          echo "✅ Multi-architecture support: linux/amd64, linux/arm64"